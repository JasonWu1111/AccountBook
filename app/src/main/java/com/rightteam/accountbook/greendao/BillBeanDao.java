package com.rightteam.accountbook.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.rightteam.accountbook.bean.BillBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BILL_BEAN".
*/
public class BillBeanDao extends AbstractDao<BillBean, Long> {

    public static final String TABLENAME = "BILL_BEAN";

    /**
     * Properties of entity BillBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Price = new Property(1, float.class, "price", false, "PRICE");
        public final static Property Time = new Property(2, long.class, "time", false, "TIME");
        public final static Property Category = new Property(3, String.class, "category", false, "CATEGORY");
        public final static Property Type = new Property(4, int.class, "type", false, "TYPE");
        public final static Property WalletId = new Property(5, Long.class, "walletId", false, "WALLET_ID");
        public final static Property Memo = new Property(6, String.class, "memo", false, "MEMO");
        public final static Property IsExpense = new Property(7, boolean.class, "isExpense", false, "IS_EXPENSE");
    }

    private Query<BillBean> walletBean_BillsQuery;

    public BillBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BillBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BILL_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRICE\" REAL NOT NULL ," + // 1: price
                "\"TIME\" INTEGER NOT NULL ," + // 2: time
                "\"CATEGORY\" TEXT," + // 3: category
                "\"TYPE\" INTEGER NOT NULL ," + // 4: type
                "\"WALLET_ID\" INTEGER," + // 5: walletId
                "\"MEMO\" TEXT," + // 6: memo
                "\"IS_EXPENSE\" INTEGER NOT NULL );"); // 7: isExpense
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BILL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BillBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getPrice());
        stmt.bindLong(3, entity.getTime());
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(4, category);
        }
        stmt.bindLong(5, entity.getType());
 
        Long walletId = entity.getWalletId();
        if (walletId != null) {
            stmt.bindLong(6, walletId);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(7, memo);
        }
        stmt.bindLong(8, entity.getIsExpense() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BillBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getPrice());
        stmt.bindLong(3, entity.getTime());
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(4, category);
        }
        stmt.bindLong(5, entity.getType());
 
        Long walletId = entity.getWalletId();
        if (walletId != null) {
            stmt.bindLong(6, walletId);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(7, memo);
        }
        stmt.bindLong(8, entity.getIsExpense() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BillBean readEntity(Cursor cursor, int offset) {
        BillBean entity = new BillBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getFloat(offset + 1), // price
            cursor.getLong(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // category
            cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // walletId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // memo
            cursor.getShort(offset + 7) != 0 // isExpense
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BillBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPrice(cursor.getFloat(offset + 1));
        entity.setTime(cursor.getLong(offset + 2));
        entity.setCategory(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.getInt(offset + 4));
        entity.setWalletId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setMemo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsExpense(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BillBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BillBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BillBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "bills" to-many relationship of WalletBean. */
    public List<BillBean> _queryWalletBean_Bills(Long walletId) {
        synchronized (this) {
            if (walletBean_BillsQuery == null) {
                QueryBuilder<BillBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.WalletId.eq(null));
                walletBean_BillsQuery = queryBuilder.build();
            }
        }
        Query<BillBean> query = walletBean_BillsQuery.forCurrentThread();
        query.setParameter(0, walletId);
        return query.list();
    }

}
